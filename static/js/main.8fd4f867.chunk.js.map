{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","handleClick","squareVal","className","onClick","Board","player","data","renderSquare","i","index","App","useState","currentPlayer","setPlayer","Array","fill","squares","setSquare","winner","setWinner","status","cloneSquares","lines","length","a","b","c","calculateWinner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAiBeA,MAdf,YAAuC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YAClBC,EAAY,KAGhB,MAFa,MAAVF,IAAeE,EAAY,kBAAC,IAAD,OACjB,MAAVF,IAAeE,EAAa,kBAAC,IAAD,OAE7B,4BACEC,UAAU,SACVC,QAASH,GAERC,ICwBQG,MAjCf,YAA4C,EAA5BC,OAA6B,IAArBC,EAAoB,EAApBA,KAAMN,EAAc,EAAdA,YAEtBO,EAAe,SAACC,GACpB,OACE,kBAAC,EAAD,CACET,MAAOO,EAAKE,GACZR,YAAa,kBAAMA,EAAYQ,IAC/BC,MAAOD,KAKb,OACE,yBAAKN,UAAU,SACb,yBAAKA,UAAU,aACZK,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKL,UAAU,aACZK,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKL,UAAU,aACZK,EAAa,GACbA,EAAa,GACbA,EAAa,M,MCsDPG,MA7Ef,WAAgB,IAAD,EACsBC,mBAAS,KAD/B,mBACNC,EADM,KACSC,EADT,OAGgBF,mBAASG,MAAM,GAAGC,KAAK,OAHvC,mBAGNC,EAHM,KAGGC,EAHH,OAIeN,mBAAS,MAJxB,mBAINO,EAJM,KAIEC,EAJF,KA+CPC,EAA2B,MAAlBR,EAAwB,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAQxD,OACE,yBAAKV,UAAU,QACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,SAAUgB,EAAM,oBAAgBA,GAAhB,eAC3BA,EAA0E,KAAjE,uBAAGhB,UAAU,UAAS,+CAAtB,KAAmDkB,GAC/D,kBAAC,EAAD,CACEd,KAAQU,EACRhB,YA9Ba,SAACS,GACpB,IAAMY,EAAY,YAAOL,GAGtBK,EAAaZ,IAAUS,IAE1BG,EAAaZ,GAASG,EACtBK,EAAUI,GAGVR,EADqC,MAAlBD,EAAwB,IAAM,KA9B3B,SAACI,GAYvB,IAXA,IAAIM,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGDd,EAAE,EAAGA,EAAEc,EAAMC,OAAQf,IAAI,CAAC,IAAD,cACbc,EAAMd,GADO,GACxBgB,EADwB,KACrBC,EADqB,KAClBC,EADkB,KAE5BV,EAAQQ,IAAMR,EAAQQ,KAAOR,EAAQS,IAAMT,EAAQQ,KAAOR,EAAQU,IACnEP,EAAUH,EAAQQ,KAkBtBG,CAAgBN,KAmBVhB,OAAQO,IACV,yBAAKV,UAAU,eACb,4BAAQC,QAhBI,WAClBU,EAAU,KACVI,EAAUH,MAAM,GAAGC,KAAK,OACxBI,EAAU,OAa0BjB,UAAU,OAAxC,eC5DU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8fd4f867.chunk.js","sourcesContent":["import React from 'react';\nimport { IoMdClose, IoMdRadioButtonOff } from 'react-icons/io';\n\nfunction Square({value, handleClick}) {\n  let squareVal = null;\n  if(value === 'o') squareVal = <IoMdRadioButtonOff/>\n  if(value === 'x') squareVal =  <IoMdClose/>\n  return (\n    <button \n      className=\"square\" \n      onClick={handleClick}\n    >\n      {squareVal}\n    </button>\n  );\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square'\n\nfunction Board({player, data, handleClick}) {\n\n  const renderSquare = (i) => {\n    return ( \n      <Square \n        value={data[i]} \n        handleClick={() => handleClick(i)} \n        index={i}\n      />\n    );\n  }\n  \n  return (\n    <div className=\"board\">\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { FaRegCircle, FaTimes } from 'react-icons/fa';\n\nimport Board from './Board';\nimport './App.scss';\n\nfunction App() {\n  const [currentPlayer, setPlayer] = useState('o');\n\n  const [squares, setSquare] = useState(Array(9).fill(null));\n  const [winner, setWinner] = useState(null);\n  // [\n  //  'o','x', null,\n  //  'o','x', null,\n  //  'o','x', null\n  // ]\n  \n  const calculateWinner = (squares) => {\n    let lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ]\n\n    for(let i=0; i<lines.length; i++){\n      const [a, b, c] = lines[i];\n      if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n        setWinner(squares[a]); // 'o' or 'x'\n      }\n    }\n    \n  }\n\n  const storeSquares = (index) => {\n    const cloneSquares = [...squares]\n\n    // if already store\n    if(cloneSquares[index] || winner) return;\n\n    cloneSquares[index] = currentPlayer;\n    setSquare(cloneSquares)\n\n    const nextPlayer = currentPlayer === 'o' ? 'x' : 'o';\n    setPlayer(nextPlayer)\n\n    calculateWinner(cloneSquares)\n    \n  }\n  const status = currentPlayer === 'o' ? <FaRegCircle/> : <FaTimes />;\n\n  const handelReset = () => {\n    setPlayer('o');\n    setSquare(Array(9).fill(null));\n    setWinner(null)\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <h2 className=\"title\">{ winner ? `Winnir is ${winner}` : `Tic Tac Toe`}</h2>\n        { !winner ? <p className=\"status\"><span>Next player: </span>  {status}</p> : null }\n        <Board \n          data = {squares}\n          handleClick={storeSquares}\n          player={currentPlayer}/>\n        <div className=\"game-result\">\n          <button onClick={handelReset} className='btn'>Restart</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  // currentPlayer: PropTypes.number,\n  squares: PropTypes.array\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}